/* global describe, it, require */
'use strict';

// MODULES //

var // Expectation library:
	chai = require( 'chai' ),

	// Module to be tested:
	pdf = require( './../lib/typedarray.js' );


// VARIABLES //

var expect = chai.expect,
	assert = chai.assert;


// TESTS //

describe( 'typed-array pdf', function tests() {

	var alpha = 20,
		beta = 5;

	it( 'should export a function', function test() {
		expect( pdf ).to.be.a( 'function' );
	});

	it( 'should evaluate the Beta pdf', function test() {
		var data, actual, expected, i;

		data = new Float64Array([
			0.01,
			0.02,
			0.03,
			0.04,
			0.05,
			0.06,
			0.06999999999999999,
			0.08,
			0.09,
			0.09999999999999999,
			0.11,
			0.12,
			0.13,
			0.14,
			0.15,
			0.16,
			0.17,
			0.18,
			0.19,
			0.2,
			0.21,
			0.22,
			0.23,
			0.24,
			0.25,
			0.26,
			0.27,
			0.28,
			0.29,
			0.3,
			0.31,
			0.32,
			0.33,
			0.34,
			0.35,
			0.36,
			0.37,
			0.38,
			0.39,
			0.4,
			0.41,
			0.42,
			0.43,
			0.44,
			0.45,
			0.46,
			0.47,
			0.48,
			0.49,
			0.5,
			0.51,
			0.52,
			0.53,
			0.54,
			0.55,
			0.5600000000000001,
			0.5700000000000001,
			0.5800000000000001,
			0.59,
			0.6,
			0.61,
			0.62,
			0.63,
			0.64,
			0.65,
			0.66,
			0.67,
			0.68,
			0.6900000000000001,
			0.7000000000000001,
			0.7100000000000001,
			0.72,
			0.73,
			0.74,
			0.75,
			0.76,
			0.77,
			0.78,
			0.79,
			0.8,
			0.8100000000000001,
			0.8200000000000001,
			0.8300000000000001,
			0.8400000000000001,
			0.85,
			0.86,
			0.87,
			0.88,
			0.89,
			0.9,
			0.91,
			0.92,
			0.93,
			0.9400000000000001,
			0.9500000000000001,
			0.9600000000000001,
			0.97,
			0.98,
			0.99
		]);
		actual = new Float64Array( data.length );

		actual = pdf( actual, data, alpha, beta );

		expected = new Float64Array([
			2.04145864045198e-33,
			1.027718152785497e-27,
			2.186706943503744e-24,
			4.961632282720709e-22,
			3.30159889698029e-20,
			1.011078740864679e-18,
			1.812150911058623e-17,
			2.194122492252993e-16,
			1.968670601152149e-15,
			1.394343720000011e-14,
			8.154941535220784e-14,
			4.071684987598006e-13,
			1.779920116907097e-12,
			6.947463760800312e-12,
			2.459288234910652e-11,
			7.994597840959511e-11,
			2.411246903464939e-10,
			6.805073397492324e-10,
			1.809915506393047e-09,
			4.563832248729582e-09,
			1.096666992700333e-08,
			2.522372097639954e-08,
			5.574316098239541e-08,
			1.187593382290742e-07,
			2.446273583700531e-07,
			4.884502065709578e-07,
			9.475513762682843e-07,
			1.789502825572989e-06,
			3.296060405238375e-06,
			5.930561405273812e-06,
			1.043922728021205e-05,
			1.800051979001508e-05,
			3.04413477071544e-05,
			5.054462435145137e-05,
			8.247951081057116e-05,
			0.0001323936689693837,
			0.0002092159362953483,
			0.0003257278561959466,
			0.0004999731484897226,
			0.0007570850040772559,
			0.001131621347134177,
			0.001670506997030721,
			0.002436687783504154,
			0.003513603641199874,
			0.00501058376559097,
			0.007069255012992215,
			0.009871032604803544,
			0.01364572742391767,
			0.01868125429239149,
			0.02533435821533197,
			0.03404218858094155,
			0.04533444317182039,
			0.05984567384808869,
			0.07832719435732789,
			0.1016578599067437,
			0.1308528018537433,
			0.1670690054656458,
			0.2116064232900182,
			0.2659031335430297,
			0.3315228977843981,
			0.4101333643185574,
			0.5034731261149867,
			0.6133059007134083,
			0.7413602833483534,
			0.8892538637703987,
			1.058401022401031,
			1.24990446092483,
			1.464431499758169,
			1.702077405275443,
			1.962219495884358,
			2.243367503107259,
			2.543017593563916,
			2.857519522474393,
			3.181968485272747,
			3.510135214907566,
			3.834449543864607,
			4.146053764688953,
			4.434942379136826,
			4.690203870043565,
			4.900377563180944,
			5.053934042267773,
			5.139880511691546,
			5.148482583088157,
			5.072080912668458,
			4.905964847298239,
			4.649245973046691,
			4.3056528994928,
			3.88414614464882,
			3.399230963876864,
			2.870830070398641,
			2.32357288111493,
			1.78537099413938,
			1.28519192988482,
			0.8500295570358983,
			0.5012199225675208,
			0.2504916193281362,
			0.09650454715940431,
			0.02316408916855397,
			0.001755773559375392
		]);

		for ( i = 0; i < actual.length; i++ ) {
			assert.closeTo( actual[ i ], expected[ i ], 1e-12 );
		}
	});

	it( 'should return an empty array if provided an empty array', function test() {
		assert.deepEqual( pdf( new Int8Array(), new Int8Array(), alpha, beta ), new Int8Array() );
	});

});
