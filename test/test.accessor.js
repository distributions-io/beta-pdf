/* global describe, it, require */
'use strict';

// MODULES //

var // Expectation library:
	chai = require( 'chai' ),

	// Module to be tested:
	pdf = require( './../lib/accessor.js' );


// VARIABLES //

var expect = chai.expect,
	assert = chai.assert;


// TESTS //

describe( 'accessor pdf', function tests() {

	var alpha = 0.5,
		beta = 0.5;

	it( 'should export a function', function test() {
		expect( pdf ).to.be.a( 'function' );
	});

	it( 'should evaluate the Beta pdf using an accessor', function test() {
		var data, actual, expected, i;

		data = [
			{'x': 0.01},
			{'x': 0.02},
			{'x': 0.03},
			{'x': 0.04},
			{'x': 0.05},
			{'x': 0.06},
			{'x': 0.07},
			{'x': 0.08},
			{'x': 0.09},
			{'x': 0.1},
			{'x': 0.11},
			{'x': 0.12},
			{'x': 0.13},
			{'x': 0.14},
			{'x': 0.15},
			{'x': 0.16},
			{'x': 0.17},
			{'x': 0.18},
			{'x': 0.19},
			{'x': 0.2},
			{'x': 0.21},
			{'x': 0.22},
			{'x': 0.23},
			{'x': 0.24},
			{'x': 0.25},
			{'x': 0.26},
			{'x': 0.27},
			{'x': 0.28},
			{'x': 0.29},
			{'x': 0.3},
			{'x': 0.31},
			{'x': 0.32},
			{'x': 0.33},
			{'x': 0.34},
			{'x': 0.35},
			{'x': 0.36},
			{'x': 0.37},
			{'x': 0.38},
			{'x': 0.39},
			{'x': 0.4},
			{'x': 0.41},
			{'x': 0.42},
			{'x': 0.43},
			{'x': 0.44},
			{'x': 0.45},
			{'x': 0.46},
			{'x': 0.47},
			{'x': 0.48},
			{'x': 0.49},
			{'x': 0.5},
			{'x': 0.51},
			{'x': 0.52},
			{'x': 0.53},
			{'x': 0.54},
			{'x': 0.55},
			{'x': 0.56},
			{'x': 0.57},
			{'x': 0.58},
			{'x': 0.59},
			{'x': 0.6},
			{'x': 0.61},
			{'x': 0.62},
			{'x': 0.63},
			{'x': 0.64},
			{'x': 0.65},
			{'x': 0.66},
			{'x': 0.67},
			{'x': 0.68},
			{'x': 0.69},
			{'x': 0.7},
			{'x': 0.71},
			{'x': 0.72},
			{'x': 0.73},
			{'x': 0.74},
			{'x': 0.75},
			{'x': 0.76},
			{'x': 0.77},
			{'x': 0.78},
			{'x': 0.79},
			{'x': 0.8},
			{'x': 0.81},
			{'x': 0.82},
			{'x': 0.83},
			{'x': 0.84},
			{'x': 0.85},
			{'x': 0.86},
			{'x': 0.87},
			{'x': 0.88},
			{'x': 0.89},
			{'x': 0.9},
			{'x': 0.91},
			{'x': 0.92},
			{'x': 0.93},
			{'x': 0.94},
			{'x': 0.95},
			{'x': 0.96},
			{'x': 0.97},
			{'x': 0.98},
			{'x': 0.99}
		];
		actual = new Array( data.length );

		actual = pdf( actual, data, alpha, beta, getValue );

		expected = [
			3.199134725855652,
			2.273642044169933,
			1.865965598979568,
			1.624368335903492,
			1.460505922742186,
			1.340326410720721,
			1.24755480436639,
			1.173305807059519,
			1.112264756883824,
			1.061032953945969,
			1.017322808178516,
			0.9795309620956123,
			0.9464960913543444,
			0.9173538412843129,
			0.891445988344769,
			0.8682613975535706,
			0.8473964112702619,
			0.8285275395276102,
			0.8113921793012145,
			0.7957747154594764,
			0.7814963145829141,
			0.7684073061375141,
			0.7563814105223139,
			0.7453113077148054,
			0.7351051938957226,
			0.7256840763020977,
			0.7169796266949113,
			0.7089324624540194,
			0.7014907585450623,
			0.6946091180428564,
			0.6882476465723161,
			0.6823711889674139,
			0.6769486960269852,
			0.6719526964107118,
			0.6673588541302946,
			0.6631455962162304,
			0.6592937983129686,
			0.6557865184150098,
			0.6526087708790295,
			0.6497473343613965,
			0.6471905885323265,
			0.6449283753791598,
			0.6429518816861497,
			0.641253539908009,
			0.6398269451711307,
			0.6386667865644955,
			0.6377687912411859,
			0.6371296801564725,
			0.636747134531978,
			0.6366197723675812,
			0.636747134531978,
			0.6371296801564725,
			0.6377687912411859,
			0.6386667865644956,
			0.6398269451711307,
			0.641253539908009,
			0.6429518816861497,
			0.6449283753791599,
			0.6471905885323265,
			0.6497473343613965,
			0.6526087708790295,
			0.6557865184150098,
			0.6592937983129686,
			0.6631455962162304,
			0.6673588541302946,
			0.6719526964107118,
			0.6769486960269852,
			0.6823711889674139,
			0.6882476465723161,
			0.6946091180428565,
			0.7014907585450624,
			0.7089324624540194,
			0.7169796266949113,
			0.7256840763020977,
			0.7351051938957226,
			0.7453113077148055,
			0.7563814105223139,
			0.7684073061375142,
			0.7814963145829142,
			0.7957747154594765,
			0.8113921793012145,
			0.8285275395276104,
			0.847396411270262,
			0.8682613975535707,
			0.891445988344769,
			0.9173538412843129,
			0.9464960913543444,
			0.9795309620956123,
			1.017322808178516,
			1.061032953945969,
			1.112264756883824,
			1.173305807059519,
			1.24755480436639,
			1.340326410720722,
			1.460505922742187,
			1.624368335903493,
			1.865965598979568,
			2.273642044169932,
			3.199134725855651
		];

		for ( i = 0; i < actual.length; i++ ) {
			assert.closeTo( actual[ i ], expected[ i ], 1e-12 );
		}

		function getValue( d ) {
			return d.x;
		}

	});

	it( 'should return an empty array if provided an empty array', function test() {
		assert.deepEqual( pdf( [], [], getValue ), [] );
		function getValue( d ) {
			return d.x;
		}
	});

	it( 'should handle non-numeric values by setting the element to NaN', function test() {
		var data, actual, expected;

		data = [
			{'x':true},
			{'x':null},
			{'x':[]},
			{'x':{}}
		];
		actual = new Array( data.length );
		actual = pdf( actual, data, alpha, beta, getValue );

		expected = [ NaN, NaN, NaN, NaN ];

		assert.deepEqual( actual, expected );

		function getValue( d ) {
			return d.x;
		}
	});

});
