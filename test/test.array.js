/* global describe, it, require */
'use strict';

// MODULES //

var // Expectation library:
	chai = require( 'chai' ),

	// Module to be tested:
	pdf = require( './../lib/array.js' );


// VARIABLES //

var expect = chai.expect,
	assert = chai.assert;


// TESTS //

describe( 'array pdf', function tests() {

	var alpha = 10,
		beta = 10;

	it( 'should export a function', function test() {
		expect( pdf ).to.be.a( 'function' );
	});

	it( 'should evaluate the Beta pdf', function test() {
		var data, actual, expected, i;

		data = [
			0.01,
			0.02,
			0.03,
			0.04,
			0.05,
			0.06,
			0.07,
			0.08,
			0.09,
			0.1,
			0.11,
			0.12,
			0.13,
			0.14,
			0.15,
			0.16,
			0.17,
			0.18,
			0.19,
			0.2,
			0.21,
			0.22,
			0.23,
			0.24,
			0.25,
			0.26,
			0.27,
			0.28,
			0.29,
			0.3,
			0.31,
			0.32,
			0.33,
			0.34,
			0.35,
			0.36,
			0.37,
			0.38,
			0.39,
			0.4,
			0.41,
			0.42,
			0.43,
			0.44,
			0.45,
			0.46,
			0.47,
			0.48,
			0.49,
			0.5,
			0.51,
			0.52,
			0.53,
			0.54,
			0.55,
			0.56,
			0.57,
			0.58,
			0.59,
			0.6,
			0.61,
			0.62,
			0.63,
			0.64,
			0.65,
			0.66,
			0.67,
			0.68,
			0.69,
			0.7,
			0.71,
			0.72,
			0.73,
			0.74,
			0.75,
			0.76,
			0.77,
			0.78,
			0.79,
			0.8,
			0.81,
			0.82,
			0.83,
			0.84,
			0.85,
			0.86,
			0.87,
			0.88,
			0.89,
			0.9,
			0.91,
			0.92,
			0.93,
			0.94,
			0.95,
			0.96,
			0.97,
			0.98,
			0.99
		];
		actual = new Array( data.length );

		actual = pdf( actual, data, alpha, beta );

		expected = [
			8.4388896288044124e-13,
			3.9434214794270128e-10,
			1.3823100206863939e-08,
			1.6770637618550881e-07,
			1.1371324213191356e-06,
			5.3343375191968667e-06,
			1.9399808930787604e-05,
			5.8542179163451845e-05,
			0.0001531523521898011,
			0.00035789129932841995,
			0.00076315504873370084,
			0.0015084948062614406,
			0.002797254619864813,
			0.0049114184546453828,
			0.0082254604476833353,
			0.013217885148406635,
			0.020479138316743063,
			0.030714664288755758,
			0.044742076284872825,
			0.063481678219182019,
			0.087939912604777501,
			0.11918568780402192,
			0.1583199361945575,
			0.2064391496054106,
			0.26459400745807271,
			0.33374453640685087,
			0.4147135009255617,
			0.50813990893767091,
			0.61443461605588723,
			0.73374002143059658,
			0.86589576707633165,
			1.010412184466116,
			1.1664529845684262,
			1.3328283710874429,
			1.5079993849330751,
			1.6900938764591982,
			1.8769340677196089,
			2.066075227521869,
			2.2548545549873356,
			2.4404489695081275,
			2.6199401519401109,
			2.7903848871967862,
			2.9488885333593085,
			3.0926792955045022,
			3.219180919191122,
			3.3260814413016981,
			3.4113957438919078,
			3.473519845912755,
			3.5112751312619666,
			3.5239410400390612,
			3.5112751312619666,
			3.473519845912755,
			3.4113957438919078,
			3.3260814413016973,
			3.219180919191122,
			3.0926792955045022,
			2.9488885333593076,
			2.7903848871967849,
			2.6199401519401109,
			2.4404489695081275,
			2.2548545549873356,
			2.066075227521869,
			1.8769340677196089,
			1.6900938764591982,
			1.5079993849330724,
			1.3328283710874405,
			1.1664529845684242,
			1.010412184466116,
			0.86589576707632709,
			0.73374002143059525,
			0.61443461605588723,
			0.50813990893767091,
			0.4147135009255617,
			0.33374453640685087,
			0.26459400745807271,
			0.2064391496054106,
			0.1583199361945575,
			0.11918568780402213,
			0.087939912604777501,
			0.063481678219182019,
			0.044742076284872825,
			0.03071466428875565,
			0.020479138316742952,
			0.013217885148406541,
			0.0082254604476833353,
			0.0049114184546453828,
			0.002797254619864813,
			0.0015084948062614406,
			0.00076315504873370084,
			0.00035789129932841995,
			0.00015315235218980056,
			5.8542179163451845e-05,
			1.9399808930787469e-05,
			5.3343375191968201e-06,
			1.1371324213191235e-06,
			1.6770637618550582e-07,
			1.3823100206864037e-08,
			3.9434214794270407e-10,
			8.438889628804473e-13
		];

		for ( i = 0; i < actual.length; i++ ) {
			assert.closeTo( actual[ i ], expected[ i ], 1e-12 );
		}
	});

	it( 'should return an empty array if provided an empty array', function test() {
		assert.deepEqual( pdf( [], [], alpha, beta ), [] );
	});

	it( 'should handle non-numeric values by setting the element to NaN', function test() {
		var data, actual, expected;

		data = [ true, null, [], {} ];
		actual = new Array( data.length );
		actual = pdf( actual, data, alpha, beta );

		expected = [ NaN, NaN, NaN, NaN ];

		assert.deepEqual( actual, expected );
	});

});
